// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package godev

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)
`

type CreateAuthorParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.Name, arg.Bio)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getAuthorsEagerLoadBooks = `-- name: GetAuthorsEagerLoadBooks :many
SELECT a.id, a.name, a.bio, b.id, b.author_id, b.title
FROM authors a
JOIN books b ON b.author_id = a.id
`

type GetAuthorsEagerLoadBooksRow struct {
	Author Author
	Book   Book
}

func (q *Queries) GetAuthorsEagerLoadBooks(ctx context.Context) ([]GetAuthorsEagerLoadBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAuthorsEagerLoadBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAuthorsEagerLoadBooksRow
	for rows.Next() {
		var i GetAuthorsEagerLoadBooksRow
		if err := rows.Scan(
			&i.Author.ID,
			&i.Author.Name,
			&i.Author.Bio,
			&i.Book.ID,
			&i.Book.AuthorID,
			&i.Book.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookEagerLoadAuthor = `-- name: GetBookEagerLoadAuthor :many
SELECT b.id, b.title, b.author_id, a.name, a.bio
FROM books b
JOIN authors a ON b.author_id = a.id
`

type GetBookEagerLoadAuthorRow struct {
	ID       int64
	Title    string
	AuthorID int64
	Name     string
	Bio      sql.NullString
}

func (q *Queries) GetBookEagerLoadAuthor(ctx context.Context) ([]GetBookEagerLoadAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookEagerLoadAuthor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookEagerLoadAuthorRow
	for rows.Next() {
		var i GetBookEagerLoadAuthorRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.Name,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
